/*
 * This file is generated by jOOQ.
*/
package com.taketoritei.order.jooq.tables;


import com.taketoritei.order.jooq.Indexes;
import com.taketoritei.order.jooq.Keys;
import com.taketoritei.order.jooq.Taketori;
import com.taketoritei.order.jooq.tables.records.DDiningMessageRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DDiningMessage extends TableImpl<DDiningMessageRecord> {

    private static final long serialVersionUID = 2025419407;

    /**
     * The reference instance of <code>taketori.d_dining_message</code>
     */
    public static final DDiningMessage D_DINING_MESSAGE = new DDiningMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DDiningMessageRecord> getRecordType() {
        return DDiningMessageRecord.class;
    }

    /**
     * The column <code>taketori.d_dining_message.days</code>.
     */
    public final TableField<DDiningMessageRecord, Date> DAYS = createField("days", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>taketori.d_dining_message.dining_place_id</code>.
     */
    public final TableField<DDiningMessageRecord, Integer> DINING_PLACE_ID = createField("dining_place_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>taketori.d_dining_message.message</code>.
     */
    public final TableField<DDiningMessageRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>taketori.d_dining_message</code> table reference
     */
    public DDiningMessage() {
        this(DSL.name("d_dining_message"), null);
    }

    /**
     * Create an aliased <code>taketori.d_dining_message</code> table reference
     */
    public DDiningMessage(String alias) {
        this(DSL.name(alias), D_DINING_MESSAGE);
    }

    /**
     * Create an aliased <code>taketori.d_dining_message</code> table reference
     */
    public DDiningMessage(Name alias) {
        this(alias, D_DINING_MESSAGE);
    }

    private DDiningMessage(Name alias, Table<DDiningMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private DDiningMessage(Name alias, Table<DDiningMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taketori.TAKETORI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.D_DINING_MESSAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DDiningMessageRecord> getPrimaryKey() {
        return Keys.D_DINING_MESSAGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DDiningMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<DDiningMessageRecord>>asList(Keys.D_DINING_MESSAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DDiningMessage as(String alias) {
        return new DDiningMessage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DDiningMessage as(Name alias) {
        return new DDiningMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DDiningMessage rename(String name) {
        return new DDiningMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DDiningMessage rename(Name name) {
        return new DDiningMessage(name, null);
    }
}
